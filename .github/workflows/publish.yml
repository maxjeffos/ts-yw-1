# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Publish Workflow

on:
  push:
    branches: [ master ]

jobs:
  build_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install -g npm@7
    - run: npx npm@7 install
    - run: ./run.sh

  build_publish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://npm.pkg.github.com/

    - run: ls -la
    - run: git config --global user.email "${{ secrets.GH_USER_EMAIL }}"
    - run: git config --global user.name "${{ secrets.GH_USER }}"

    - run: npm install -g npm@7
    - run: npm --version
    - run: npm install -g lerna
    - run: which lerna
    - run: npm install

    - name: Configure NPM
      run: |
        echo "//npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN" >> .npmrc
        echo '@maxjeffos:registry=https://npm.pkg.github.com' >> .npmrc
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#     - run: npm login --registry=https://npm.pkg.github.com --scope=@maxjeffos
#       env:
#         NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      
#     - run: npm whoami
#       env:
#         NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    # make git ignore the changes to .npmrc so lerna doesn't complain
    - run: git update-index --skip-worktree -- .npmrc
    - run: lerna publish minor --yes --registry=https://npm.pkg.github.com
      env:
        NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Install ghr - for uploading GitHub artifacts
      run: |
        which go
        go version
        go get -u github.com/tcnksm/ghr
        
    - name: Create binaries with pkg
      run: |
        npx pkg -t node14-linux-x64 -o sweetcli-node14-linux-x64 .
        ls -la

    - run: echo ${{github.repository}}

    # - name: Get Latest Release
    #   id: latest_version
    #   uses: abatilo/release-info-action@v1.3.0
    #   with:
    #     owner: maxjeffos
    #     repo: ts-yw-1

    - name: Get latest tag
      run: ./scripts/get-latest-tag.sh

#     - name: Upload Release Asset
#       id: upload-release-asset 
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.latest_version.outputs.latest_tag }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
# #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: ./sweetcli-node14-linux-x64
#         asset_name: sweetcli-node14-linux-x64
#         asset_content_type: application/x-binary
